#Mode: Mode trả về phần tử có số lần xuất hiện nhiều nhất trong dãy số cho trước
#1. Xác đinh hàm cần tìm, đặt tên calculate_mode, hàm này nhận đối số numbers truyền vào.
#2. Dùng hàm counter để đếm số lần xuất hiện của mỗi phần tử trong chuỗi, đại diện bởi biến c.
#3. Dùng most_common(), truyền vào 1, trả về giá trị và số lần xuất hiện của phần tử xuất hiện nhiều nhất, đại diện bởi biến mode.
#4. Trả về phần giá trị của mode được tính ở bước 3.

# import packages Counter de dem so lan xuat hien cua moi gia tri trong chuoi
from collections import Counter

# data
points = [7, 8, 9, 2, 10, 9, 9, 9, 9, 4, 5, 6, 1, 5, 6, 7, 8, 6, 1, 10]

def calculate_mode(numbers):        #1
    c = Counter(numbers)            #2
    mode = c.most_common(1)         #3
    return mode[0][0]               #4

print("Mode cua chuoi so da cho la: ", calculate_mode(points))

# Trong trường hợp dãy số truyền vào có nhiều phần tử có mật độ xuất hiện giống nhau, chúng ta cần trả về toàn bộ các mode đó.

#1. Xác đinh hàm cần tìm, đặt tên calculate_mode, hàm này nhận đối số numbers truyền vào.
#2. Dùng hàm counter để đếm số lần xuất hiện của mỗi phần tử trong chuỗi, đại diện bởi biến c.
#3. Dùng most_common(), trả về giá trị và số lần xuất hiện của mỗi phần tử, đại diện bởi biến number_freq.
#4. Theo sắp xếp của hàm most_common, vị trí đầu tiên chứa giá trị và số lần xuất hiện nhiền nhất, nên ta cần lấy số lần xuất hiện của giá trị xuất hiện nhiều nhất, đại diện bởi biến max_count.
#5. Tạo một chuỗi rỗng để chứa giá trị.
#6. Với lần lượt từng cặp giá trị trong bước 3 tính được, so sánh với max_count của bước 4 trả về, nếu bằng max_count thì bỏ giá trị phần tử vào mảng rỗng tạo ở bước 5

# import packages Counter de dem so lan xuat hien cua moi gia tri trong chuoi
from collections import Counter

# data
points = [7, 8, 9, 2, 10, 9, 9, 9, 9, 4, 5, 6, 1, 5, 6, 7, 8, 6, 1, 10, 6, 6]

def calculate_mode(numbers):                #1
    c = Counter(numbers)                    #2
    numbers_freq = c.most_common()          #3
    max_count = numbers_freq[0][1]          #4
    modes = []                              #5
    for num in numbers_freq:
        if num[1] == max_count:             #6
            modes.append(num[0])
    return modes

print("Mode cua day so points la: ", calculate_mode(points))

# Nếu chúng ta muốn trình bày toàn bộ số lần xuất hiện cùng giá trị của chuỗi thành bảng
#1. Xác đinh hàm cần tìm, đặt tên frequency_table, hàm này nhận đối số numbers truyền vào.
#2. Dùng hàm counter để đếm số lần xuất hiện của mỗi phần tử trong chuỗi, đại diện bởi biến table.
#3. Dùng most_common(), trả về giá trị và số lần xuất hiện của mỗi phần tử, đại diện bởi biến number_freq.
#4. Vì hàm most_common sắp xếp theo số lần xuất hiện nhưng ta đang cần sắp xếp theo giá trị phần tử, nên chúng ta dùng sort().
#5. Tạo bảng với cột trái là giá trị phần tử, cột phải là số lần xuất hiện. \t tạo ra khoảng trống giữa 2 giá trị.
#6. Với lần lượt từng cặp giá trị trong bước 4 tính được, in giá trị phần tử trước rồi khoảng trống rồi số lần xuất hiện. Hàm format dùng để truyền giá trị vào các phần tử trước đó được bỏ trong cặp ngoặc {}.

# import packages Counter de dem so lan xuat hien cua moi gia tri trong chuoi
from collections import Counter

# data
points = [7, 8, 9, 2, 10, 9, 9, 9, 9, 4, 5, 6, 1, 5, 6, 7, 8, 6, 1, 10, 6, 6]

def frequency_table(numbers):               #1
    table = Counter(numbers)                #2
    numbers_freq = table.most_common()      #3
    numbers_freq.sort()                     #4
    print('Number\tFrequency')              #5
    for number in numbers_freq:             #6
        print('{0}\t{1}'.format(number[0], number[1]))

frequency_table(points)


